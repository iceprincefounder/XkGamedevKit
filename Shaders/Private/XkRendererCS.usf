// Copyright Â©ICEPRINCE. All Rights Reserved.

/*=============================================================================
	XkRendererCS.usf
=============================================================================*/

#include "/Engine/Private/Common.ush"

int4 TextureFilter;
int4 SuperResMask;
float4 Center;
float4 Extent;
Texture2D<float4> SourceTexture0;
Texture2D<float4> SourceTexture1;
RWTexture2D<float4> TargetTexture;


[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(int2 DispatchThreadId : SV_DispatchThreadID)
{
	BRANCH
	if (any(DispatchThreadId > TextureFilter.ww))
	{
		return;
	}
	const uint2 PixelCoord = uint2(DispatchThreadId.x, DispatchThreadId.y);
	const float4 WeightmapValue = SourceTexture1.Load(uint3(PixelCoord, 0)).a;
	const uint SplatID = (uint)floor(WeightmapValue.a * 255.0f);
#if HEIGHT_FILTER
	int Range = (int) TextureFilter.x;
	// Only apply super resolution outside mask area to height filter
	if	(SplatID >= (uint)SuperResMask.x && SplatID < (uint)SuperResMask.y)
	{
		Range = max(Range, SuperResMask.z) * SuperResMask.w;
	}	
	float Sum = 0.0f;       // values sum of height which store in z component
	int SumCount = 0;
	for (int x = -Range; x <= Range; x++)
	{
		for (int y = -Range; y <= Range; y++)
		{
			const uint2 PixelCoordOffset = uint2(DispatchThreadId.x + x, DispatchThreadId.y + y);
			BRANCH
			if (any(PixelCoordOffset <= TextureFilter.ww))
			{
				float4 PixelValue = SourceTexture0.Load(uint3(PixelCoordOffset, 0));
				Sum += PixelValue.w;
				SumCount++;
			}
		}
	}

	float4 Source = SourceTexture0.Load(uint3(PixelCoord, 0));
	TargetTexture[PixelCoord] = float4(Source.x, Source.y, Source.z, Sum / SumCount);
#endif
	
#if NORMAL_FILTER
	int Range = (int) TextureFilter.y;
	// Only apply super resolution outside mask area to height filter
	if	(SplatID >= (uint)SuperResMask.x && SplatID <= (uint)SuperResMask.y)
	{
		Range = max(Range, SuperResMask.z) * SuperResMask.w;
	}
	const float HeightScale = Extent.w - Extent.z;
	float4 Source = SourceTexture0.Load(uint3(PixelCoord, 0));
	float2 WorldSizePrePixel = Extent.xy / TextureFilter.ww;
	const uint2 PixelCoordOffsetX = uint2(DispatchThreadId.x + Range, DispatchThreadId.y);
	const uint2 PixelCoordOffsetY = uint2(DispatchThreadId.x, DispatchThreadId.y + Range);
	float A_H = Source.w;
	float B0_H = SourceTexture0.Load(uint3(PixelCoordOffsetX, 0)).w;
	float B1_H = SourceTexture0.Load(uint3(PixelCoordOffsetY, 0)).w;
	float3 A = float3(0.0, 0.0, (A_H - 0.5f) * 2.0f * HeightScale);
	float3 B0 = float3(WorldSizePrePixel.x * Range, 0.0, (B0_H - 0.5f) * 2.0f * HeightScale);
	float3 B1 = float3(0.0, WorldSizePrePixel.y * Range, (B1_H - 0.5f) * 2.0f * HeightScale);
	float3 N = cross(B0 - A, B1 - A);
	N = normalize(N);
	float2 PackedN = N.xy / (N.z + 1.0) * 0.5 + 0.5; // Compress normal to float2
	TargetTexture[PixelCoord] = float4(PackedN.x, PackedN.y, 0.0f, Source.w);
#endif

#if SDF_FILTER
	const float LandHeight = Center.w;
	const int MaxRange = 64;
	const int Range = (int) TextureFilter.z;
	const int Stripe = int(MaxRange / Range);
	float4 Source = SourceTexture0.Load(uint3(PixelCoord, 0));
	float HeightScale = Extent.w - Extent.z;
	float CurrentHeight = (Source.w - 0.5f) * 2.0f * HeightScale;
	float2 WorldSizePrePixel = Extent.xy / TextureFilter.ww;
	float MaxDistance = length(float2((float)Range, (float)Range)) * WorldSizePrePixel;
	float MinimalDistance = 1000.0f;
	BRANCH
	if	(CurrentHeight >= LandHeight)
	{
		TargetTexture[PixelCoord] = float4(Source.x, Source.y, Source.z, Source.w);
		return;
	}
	for (int x = -Range; x <= Range; x++)
	{
		for (int y = -Range; y <= Range; y++)
		{
			const uint2 PixelCoordOffset = uint2(DispatchThreadId.x + Stripe * x, DispatchThreadId.y + Stripe * y);
			BRANCH
			if (any(PixelCoordOffset <= TextureFilter.ww))
			{
				float4 PixelValue = SourceTexture0.Load(uint3(PixelCoordOffset, 0));
				float PixelHeight = (PixelValue.w - 0.5f) * 2.0f * HeightScale;
				BRANCH
				if (PixelHeight >= LandHeight)
				{
					float2 PixelOffset = float2(x, y);
					float2 WorldOffset = PixelOffset * WorldSizePrePixel;
					float2 Distance = WorldOffset - float2(0.0, 0.0);
					float DistanceValue = length(Distance);
					MinimalDistance = min(MinimalDistance, DistanceValue);
				}
			}
		}
	}
	TargetTexture[PixelCoord] = float4(Source.x, Source.y, saturate(MinimalDistance / MaxDistance), Source.w);
#endif
}