// Copyright 2022, Kai Xu (kevintsuixu), All rights reserved.
// Simular with LandscapeFactoryCommon.ush and WaterMeshFactoryCommon.ush

# include "/Engine/Private/Common.ush"
# include "/Engine/Private/VertexFactoryCommon.ush"

struct FVertexFactoryInput
{
	float4 Position: ATTRIBUTE0;
	/* instance position */
	float4 InstancePosition: ATTRIBUTE1;
	float4 InstanceExtraData: ATTRIBUTE2;

	VF_GPUSCENE_DECLARE_INPUT_BLOCK(2)
	VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
};

struct FVertexFactoryIntermediates
{
	float4 InputPosition;
	float4 InstancePosition;
	float4 InstanceExtraData;

	float3 TranslatedWorldPos;
	float3 WorldNormal;
	float4 VertexColor;
	float4 TexCoord0;

	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
};

struct FVertexFactoryInterpolantsVSToPS
{
#if INTERPOLATE_VERTEX_COLOR
	float4	VertexColor : COLOR0;
#endif

	float2 TexCoord0: TEXCOORD0;
#if NUM_MATERIAL_TEXCOORDS
	float2 TexCoord1: TEXCOORD1;
	float2 TexCoord2: TEXCOORD2;
#endif
#if VF_USE_PRIMITIVE_SCENE_DATA
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#endif
};

struct FVertexFactoryInterpolantsVSToDS
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
};

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	return Interpolants.PrimitiveId;
#else
	return 0;
#endif
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	Interpolants.PrimitiveId = PrimitiveId;
#endif
}

/** [VertexFactory Interface] */
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FLWCMatrix LocalToWorld = GetPrimitiveData(Intermediates).LocalToWorld;
	return TransformLocalToTranslatedWorld(Intermediates.TranslatedWorldPos, LocalToWorld);
}

/** [VertexFactory Interface] */
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FLWCMatrix LocalToWorld = GetPrimitiveData(Intermediates).LocalToWorld;
	FLWCVector3 WorldPosition = TransformLocalToWorld(Intermediates.TranslatedWorldPos, LocalToWorld);
	return float4(LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PrevPreViewTranslation)), 1.0f);
}

/** [VertexFactory Interface] */
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(GetPrimitiveId(Interpolants));
	return float4(LWCToFloat(LWCAdd(PrimitiveData.ObjectWorldPosition, ResolvedView.PreViewTranslation)), PrimitiveData.ObjectRadius);
}

/** [VertexFactory Interface] */
uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}

/** [VertexFactory Interface] */
float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.WorldNormal;
}

float3x3 CalcTangentBasisFromWorldNormal(float3 Normal)
{
	float3x3 LocalToTangent = float3x3(float3(1, 0, 0), float3(0, 1, 0), float3(0, 0, 1));
	return LocalToTangent;
}

/** [VertexFactory Interface] */
float3x3 VertexFactoryGetPerPixelTangentBasis(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float3x3 Result = float3x3(float3(1, 0, 0), float3(0, 1, 0), float3(0, 0, 1));
	return Result;
}

/** [VertexFactory Interface]
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 Result = CalcTangentBasisFromWorldNormal(Intermediates.WorldNormal);
	return Result;
}

/** [VertexFactory Interface] */
float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

/** [VertexFactory Interface] */
float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

/** [VertexFactory Interface] */
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.VertexColor = Intermediates.VertexColor;
#endif

	Interpolants.TexCoord0.xy = Intermediates.TexCoord0.xy;
#if NUM_MATERIAL_TEXCOORDS
		float2 CustomizedUVs[NUM_MATERIAL_TEXCOORDS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		Interpolants.TexCoord0.xy = CustomizedUVs[0];
#if NUM_MATERIAL_TEXCOORDS > 1
				Interpolants.TexCoord1.xy = CustomizedUVs[1];
#if NUM_MATERIAL_TEXCOORDS > 2
					Interpolants.TexCoord2 = CustomizedUVs[2];
#endif // NUM_MATERIAL_TEXCOORDS > 2
#endif // NUM_MATERIAL_TEXCOORDS > 1
#endif // NUM_MATERIAL_TEXCOORDS
	SetPrimitiveId(Interpolants, Intermediates.SceneData.PrimitiveId);

	return Interpolants;
}

/** [VertexFactory Interface] */
/* Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs.*/
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

	float2 LightmapUVs = float2(0, 0);

	float3 VertexNormal = float3(0, 0, 1);
#if NUM_MATERIAL_TEXCOORDS
	Result.TexCoords[0] = Interpolants.TexCoord0.xy;
#if NUM_MATERIAL_TEXCOORDS > 1
	Result.TexCoords[1]	= Interpolants.TexCoord1.xy;
#if NUM_MATERIAL_TEXCOORDS > 2
	Result.TexCoords[2] = Interpolants.TexCoord2.xy;
#endif // NUM_MATERIAL_TEXCOORDS > 2
#endif // NUM_MATERIAL_TEXCOORDS > 1
#endif // NUM_MATERIAL_TEXCOORDS

	// Calculate LocalToTangent directly from normal map texture.
	float3x3 TangentToLocal = VertexFactoryGetPerPixelTangentBasis(Interpolants);
	Result.TangentToWorld = TangentToLocal;
	Result.UnMirrored = 1;
	Result.VertexColor = 1;
#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.VertexColor;
#endif

#if LIGHTMAP_UV_ACCESS
	Result.LightmapUVs = LightmapUVs;
#endif

	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);
	return Result;
}

/** [VertexFactory Interface]
 * Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. 
 */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;

	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.TangentToWorld = float3x3(1, 0, 0, 0, 1, 0, 0, 0, 1);
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = float3(0, 0, 1);
	Result.VertexColor = Intermediates.VertexColor;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	UNROLL
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Intermediates.TranslatedWorldPos.xy;
	}
#endif //NUM_MATERIAL_TEXCOORDS

#if VF_USE_PRIMITIVE_SCENE_DATA
	Result.PrimitiveId = Interpolants.PrimitiveId;
#endif
	return Result;
}

/** [VertexFactory Interface] */
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Intermediates.InputPosition = Input.Position;

#if FARMESH_VERTEX
	Intermediates.InstancePosition = 0;
	Intermediates.InstanceExtraData = 0;
#else
	Intermediates.InstancePosition = Input.InstancePosition;
	Intermediates.InstanceExtraData = Input.InstanceExtraData;
#endif
	float3 VertexPosition = Input.Position.xyz;
	float3 TranslatedWorldPos = 0;
	float4 InstancePosition = Intermediates.InstancePosition;
	float4 InstanceExtraData = Intermediates.InstanceExtraData;
	const float3 Translation = InstancePosition.xyz;
	const float3 Scale = InstancePosition.w;
	// calculate the world position
	TranslatedWorldPos.xyz = VertexPosition.xyz * Scale;
	TranslatedWorldPos.xyz += Translation;
	float3 WorldNormal = float3(0.0, 0.0, 1.0);
	float4 VertexColor = float4(1.0, 1.0, 1.0, 1.0);
	float4 TexCoord0 = float4(0.0, 0.0, 0.0, 0.0);

#if QUADTREE_VERTEX
	// CDLOD morph vertex
	// @see: https://svnte.se/cdlod-terrain WaterMeshVertexFactory.usf
	const float LODLevel = InstanceExtraData.x;
	const float LODScale = InstanceExtraData.y;
	const float QuadNum = InstanceExtraData.z;
	const float NodeDepth = InstanceExtraData.w;
	const float2 QuadSize = Scale.xy / QuadNum;
	float3 CameraPos = LWCToFloat(ResolvedView.WorldCameraOrigin).xyz;
	float Dist = distance(TranslatedWorldPos.xy, CameraPos.xy);
	const float LowRange = LODScale * pow(2.0, LODLevel + 1.0);
	const float HighRange = LODScale * pow(2.0, LODLevel + 2.0);
	float Factor = (Dist - LowRange) / (HighRange - LowRange);
	float MorphValue = clamp(Factor / 0.5 - 1.0, 0.0, 1.0);

	float LODFactor = MorphValue;
	float2 MorphOriginTWS = Translation.xy - Scale.xy * 0.5f;
	const float2 MorphLocalPos = TranslatedWorldPos.xy - MorphOriginTWS;
	float2 Grid4 = 4.0f * QuadSize;
	float2 Offset = frac(MorphLocalPos / Grid4) - float2(0.5, 0.5);
	const float MinRadius = 0.26f;
	if (abs(Offset.x) < MinRadius)
	{
		TranslatedWorldPos.x += Offset.x * LODFactor * Grid4.x;
	}
	if (abs(Offset.y) < MinRadius)
	{
		TranslatedWorldPos.y += Offset.y * LODFactor * Grid4.y;
	}
#elif HEXAGON_VERTEX
	VertexColor = InstanceExtraData;
#endif
	Intermediates.TranslatedWorldPos = TranslatedWorldPos;
	Intermediates.WorldNormal = WorldNormal;
	Intermediates.VertexColor = VertexColor;
	Intermediates.TexCoord0 = TexCoord0;
	Intermediates.SceneData = GetSceneDataIntermediates();
	return Intermediates;
}

# include "/Engine/Private/VertexFactoryDefaultInterface.ush"